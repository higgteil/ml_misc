# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DIonLvMS6sEO21zL7BpejPjnIclEM9SK
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Created on Mon Nov  1 11:34:12 2021
"""

import os
from sklearn.model_selection import cross_val_score, RepeatedStratifiedKFold
import imblearn 
from imblearn.over_sampling import SMOTE
from collections import Counter
from sklearn.model_selection import train_test_split

import numpy as np
import pandas as pd 
from confounds import Residualize
from sklearn.model_selection import train_test_split, RandomizedSearchCV,RepeatedStratifiedKFold, StratifiedKFold, cross_val_score
from sklearn.pipeline import Pipeline
from sklearn.inspection import permutation_importance
from matplotlib import pyplot
from sklearn.linear_model import LogisticRegression

from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
import pandas as pd
import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score, RepeatedStratifiedKFold
from sklearn.feature_selection import RFECV
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from xgboost.sklearn import XGBClassifier
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectFdr
from sklearn.feature_selection import f_classif
from sklearn.metrics import roc_auc_score, accuracy_score
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer







class Model_pipes:
    def __init__(self, **kwargs):
        self.kwargs = kwargs
        self.base_estimator = LogisticRegression(max_iter=10000, random_state=1)
        self.model_pipe = Pipeline([ 
                                ('lr', LogisticRegression(max_iter = 10000)) 
                                ])
        self.model = list()
    def feature_selection(self, fs, model2pipe=None):
        if fs == 'rfecv' and model2pipe is not None:
            rfecv = RFECV(estimator = model2pipe, cv = 10, scoring = 'accuracy')
            self.model_pipe.steps.insert(0,['fs',rfecv]) #insert as second step
        elif fs =='rfecv' and model2pipe is None:
            rfecv = RFECV(estimator = self.base_estimator,  cv = 10, scoring = 'accuracy')
            self.model_pipe.steps.insert(0,['fs',rfecv])
            
        if fs == 'fdr' and model2pipe is not None:
            selector = SelectFdr(f_classif)
            self.model_pipe.steps.insert(0,['fdr', selector])
            self.model_pipe.steps.pop(1)
            self.model_pipe.steps.insert(1,['estimator',model2pipe])
           # self.model_pipe.steps.insert(2,['estimator', self.base_estimator])
        elif fs == 'fdr' and model2pipe is None:
            selector = SelectFdr(f_classif)
            self.model_pipe.steps.insert(0,['fdr', selector])
        return self.model_pipe
   
    def custom(self, model2pipe):
        self.model_pipe.steps.pop(0)
        self.model_pipe.steps.insert(1,['estimator',model2pipe])
        return self.model_pipe
        
        
            
    
m=Model_pipes()
m.feature_selection('fdr', XGBClassifier())        
m.feature_selection('rfecv',XGBClassifier())      
        

class preproc:
    def __init__(self, **kwargs):
        self.kwargs = kwargs
        self.scaler = StandardScaler()
        self.iterativeImp = IterativeImputer()
        self.imputer=SimpleImputer(missing_values=np.nan )
        self.cat_imputer = SimpleImputer(missing_values=np.nan, strategy="most_frequent")
        self.lr = LogisticRegression()
        self.preproc_pipe = Pipeline ([ ('impute', self.imputer), 
                                        ('normalizer', self.scaler), #Step1 - normalize data
                                        ])
        
    
    def preproc_cat(self,X):
        self.preproc_pipe.steps.pop(0)
        self.preproc_pipe.steps.insert(0,['cat_imputer', self.cat_imputer])
        X_new = self.preproc_pipe.fit_transform(X)
        return X_new
    
    
    def preproc(self,X_train, X_test, y_train, y_test, categorial=None):
        cols = X.columns.tolist()
        # X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,
        #                                                         test_size = 0.25, 
        #                                                         random_state = 1000)

        if categorial is not None:
            self.preproc_pipe.steps.pop(0)
            self.preproc_pipe.steps.insert(0,['cat_imputer', self.cat_imputer])
            X_train = self.preproc_pipe.fit_transform(X_train)
            X_test = self.preproc_pipe.fit_transform(X_test)
            X_test = X_test.drop(['sex','site'],axis=1)
        else:
            X_train = self.preproc_pipe.fit_transform(X_train)
            X_test = self.preproc_pipe.fit_transform(X_test)

        X_train = pd.DataFrame(data=X_train, columns=cols)
        X_test = pd.DataFrame(data=X_test, columns=cols)
        X_test = X_test.drop(['sex','site'],axis=1)

        y_train = y_train.values.flatten()
        y_test = y_test.values.flatten()
        return X_train, X_test, y_train, y_test
    






""" load data
"""

import utils_
from utils_ import DataLoader, oversampling_cb, preproc_tt_split,prepare,reduce_df

# load data
lc = DataLoader()

# drop ID columns
prep = prepare()
X, y = prep.clean_df(X_enc, y)
print("X features:{}".format(X.shape[1]))

# configure the cross-validation procedure
cv_outer =  RepeatedStratifiedKFold(n_splits=10, n_repeats=2, random_state=1)
 
### Instantiate our helper classes
m_pipe= preproc()
m=Model_pipes()